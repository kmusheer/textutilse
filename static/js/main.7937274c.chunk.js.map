{"version":3,"sources":["component/TextForm.js","component/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["TextForm","props","_useState","useState","_useState2","Object","slicedToArray","text","setText","react_default","a","createElement","Fragment","className","style","color","mode","heading","aria-label","value","onChange","event","target","backgroundColor","id","rows","type","onClick","newText","toUpperCase","toLowerCase","split","map","currentValue","slice","join","SpeechSynthesisUtterance","window","speechSynthesis","speak","joinArr","reverse","match","replace","trim","e","document","querySelector","select","execCommand","alert","btoa","newtext","atob","wordArr","filter","item","pos","indexOf","length","Navbar","concat","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-current","toggleMode","htmlFor","modeName","prototype","PropTypes","string","isRequired","aboutText","App","setmodeName","_useState3","_useState4","setMode","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.7937274c.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    \r\n    const [text, setText] = useState('');\r\n\r\n    const handelUpClick = () =>{\r\n        // console.log(\"UpperCase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n\r\n    const handelLowerClick = () =>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const handelCamelClick = () =>{\r\n        let newText = text.split(\" \").map(currentValue =>{\r\n            let newText = currentValue[0].toUpperCase()+currentValue.slice(1);\r\n            return newText;\r\n        })\r\n        setText(newText.join(\" \"));\r\n    }\r\n    const handelCopyClick = (e) =>{\r\n        const area = document.querySelector('#textArea')\r\n        area.select();\r\n        document.execCommand('copy');\r\n        // let newText =  '';\r\n        // setText(newText);\r\n        alert('your text is copied');\r\n    }\r\n\r\n    const handelSpeakClick = () =>{\r\n        let newText = new SpeechSynthesisUtterance();\r\n        newText.text = text;\r\n        window.speechSynthesis.speak(newText);\r\n        // setText(newText);\r\n    }\r\n    const handelReverseClick = () =>{\r\n        let newText =  text.split(\"\");\r\n        let newArr = newText.reverse();\r\n        let joinArr = newArr.join(\"\");\r\n        setText(joinArr);\r\n    }\r\n    const handelTextClick = () =>{\r\n        const regex = /[0-9/A-Z/a-z/ /]/g;\r\n        const letter = text.match(regex);\r\n        const newText = letter.join(\"\");\r\n        setText(newText);\r\n    }\r\n    const handelNumbeClick = () =>{\r\n        const regex = /[0-9/ /]/g;\r\n        const digit = text.match(regex);\r\n        const newText = digit.join(\"\")\r\n        setText(newText);\r\n    }\r\n    const handelSpaceClick = () =>{\r\n        const newText = text.replace(/\\s+/g, ' ').trim();\r\n        setText(newText);\r\n    }\r\n\r\n    const handelClearClick = () =>{\r\n        let newText =  '';\r\n        setText(newText);\r\n    }\r\n\r\n    const handelDecodeClick = () =>{\r\n        // console.log(\"UpperCase was changed\");\r\n        let newtext = atob(text);\r\n        setText( newtext);\r\n    }\r\n    const handelEncodeClick = () =>{\r\n        // console.log(\"UpperCase was changed\");\r\n        setText(btoa(text));\r\n    }\r\n\r\n    const handelDuplicateClick = () =>{\r\n        let wordArr = text.split(\" \")\r\n        let newText = wordArr.filter((item,pos)=>{\r\n            return wordArr.indexOf(item)===pos;\r\n        })\r\n        newText = newText.join(\" \");\r\n        setText(newText);\r\n    }\r\n\r\n    // const handelReplaceClick = () =>{\r\n    //     let repVal =  prompt(\"Enter value to be replaced :\");\r\n    //     // let tobeReplaced = new RegExp(repVal,'g');\r\n    //     // let tobeReplaced = new RegExp(repVal,/ \\([\\s\\S]*?\\)/g);\r\n    //     let toReplaceVal =  prompt(\"Enter value which you want to replace :\")\r\n    //     // let newText = (tobeReplaced,toReplaceVal);\r\n    //     const newText = text.replace(\"tobeReplaced\", \"toReplaceVal\");\r\n    //     setText(newText);\r\n    // }\r\n    \r\n    const handleOnChange = (event) =>{\r\n        // console.log(\"UpperCase was changed\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className='container' style ={{color: props.mode === 'light'?'black' : 'white'}}>\r\n            {/* <form> */}\r\n                <h1>{props.heading}</h1>\r\n                {/* <div className=\"mb-3\">\r\n                    <label htmlFor=\"exampleInputEmail1\" className=\"form-label\">Email address</label>\r\n                    <input type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" />\r\n                    <div id=\"emailHelp\" className=\"form-text\">We'll never share your email with anyone else.</div>\r\n                </div> */}\r\n                {/* <div className=\"input-group my-3\"> */}\r\n                    {/* <label for=\"textArea\" class=\"form-label\">Email address</label><br/> */}\r\n                    {/* <span className=\"input-group-text\">With textarea</span> */}\r\n                    <textarea className=\"form-control\" aria-label=\"With textarea\" value={text} onChange={handleOnChange} style ={{backgroundColor: props.mode === 'light'?'white' : '#656b75',color: props.mode === 'light'?'black' : 'white'}} id='textArea' rows=\"6\"></textarea>\r\n                {/* </div> */}\r\n                <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelUpClick}>Upper Case</button>\r\n                <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelLowerClick}>Lower Case</button>\r\n                <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelCamelClick}>Capitalized</button>\r\n                <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelSpeakClick}>Speak</button>\r\n                <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelReverseClick}>Reverse</button>\r\n                <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelTextClick}>Extract Text</button>\r\n                <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelNumbeClick}>Extract Number</button>\r\n                <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelSpaceClick}>Remove Extra Space</button>\r\n                <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelCopyClick}>Copy</button>\r\n                <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelEncodeClick}>Encode</button>\r\n                <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelDecodeClick}>Decode</button>\r\n                <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelDuplicateClick}>Duplicate Remove</button>\r\n                {/* <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelReplaceClick}>Replace</button> */}\r\n                <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={handelClearClick}>Clear</button>\r\n            {/* </form> */}\r\n        </div>\r\n        <div className=\"cintainer\" style ={{color: props.mode === 'light'?'black' : 'white'}}>\r\n            <h1>Text summary</h1>\r\n            <p> <b>{text.split(\" \").length-1}</b> words and <b>{text.length}  </b> character in your  text</p>\r\n            <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n            <h3>{text.length>0 ? text : \"Enter something in above textbox to preview here\"}</h3>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nexport default function Navbar(props) { \r\n\r\n  return (\r\n    <nav className={` navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} mb-5`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        {/* <a href=\"/\">Home</a> |{\" \"}\r\n        <a href=\"about\">About</a> */}\r\n       \r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/About\">{props.aboutText}</Link>\r\n            </li>*/}\r\n          </ul> \r\n          {/* <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'white'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label \" htmlFor=\"flexSwitchCheckDefault\">{props.modeName}</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.prototype = {\r\n  title: PropTypes.string.isRequired,\r\n  // title : PropTypes.string,\r\n  aboutText: PropTypes.string\r\n}\r\n\r\n// defaulr props when you hava not given dynamic title and aboutText\r\n\r\n// Navbar.defaultProps = {\r\n//   title: 'set title here',\r\n//   aboutText: 'About text here'\r\n// }","// import logo from './logo.svg';\nimport './App.css';\n// import About from './component/About';\nimport TextForm from './component/TextForm.js';\nimport Navbar from './component/Navbar.js';\nimport React, { useState } from 'react'\n// import Alert from './component/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n// let name = 'Musheer'\nfunction App() {\n  const [modeName, setmodeName] = useState(\"Enabel dark mode\");\n  const [mode, setMode] = useState('light');\n  // const [alerts, setalerts] = useState('null')\n  // const showalerts = (type, message)=>{\n  //   setalerts({\n  //     type: type,\n  //     msg : message\n  //   })\n  //   setTimeout(() => {\n  //     setalerts(null)\n  //   }, 2000);\n  // }\n\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = 'grey';\n      setmodeName(\"Enable light mode\");\n      // showalerts(\"Success\", \"Dark mode enabled\")\n      document.title = (\"TextUtils - Home dark-mode\")\n    } else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n      setmodeName(\"Enable dark mode\");\n      // showalerts(\"dark\", \"Light mode enabled\")\n      document.title = (\"TextUtils - Home\")\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n        <div className=\"container\">\n        <Navbar title=\"Texutils\" aboutText=\"About us\" mode={mode} toggleMode={toggleMode} modeName={modeName} />\n        {/* <Navbar /> */}\n        {/* <Alert alert ={alerts} /> */}\n          {/* <Routes>\n            <Route path=\"/About\" element={<About />} />\n            <Route path=\"/\" element={<TextForm heading=\"Enter text to utilize\" mode={mode} />} /> \n            </Routes>\n        // </Router>*/}\n            {<TextForm heading=\"Enter text to utilize\" mode={mode} />}\n        </div>\n\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}